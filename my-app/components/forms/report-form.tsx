"use client";

import { useState, useCallback } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { useSession } from 'next-auth/react';
import { 
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter
} from '@/components/ui/dialog';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage
} from '@/components/ui/form';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue
} from '@/components/ui/select';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Input } from '@/components/ui/input';
import { useToast } from '@/hooks/use-toast';
import { ReportType, ReportTargetType } from '@/types/report';
import { Loader2, X, Upload } from 'lucide-react';
import { cn } from '@/lib/utils';
import { generateUploadSignature } from '@/lib/services/cloudinary';
import Image from 'next/image';

// Form schema
const reportFormSchema = z.object({
  type: z.enum(Object.values(ReportType) as [string, ...string[]]),
  reason: z.string().min(10, 'Please provide at least 10 characters').max(500, 'Maximum 500 characters allowed'),
  details: z.string().max(2000, 'Maximum 2000 characters allowed').optional(),
  attachments: z.array(z.string().url()).max(5, 'Maximum 5 attachments allowed').optional(),
});

type ReportFormValues = z.infer<typeof reportFormSchema>;

interface ReportFormProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  targetType: ReportTargetType;
  targetId: string;
  targetName: string; // e.g., property title, user name, etc.
  onSuccess?: () => void;
}

export function ReportForm({ 
  open, 
  onOpenChange, 
  targetType, 
  targetId, 
  targetName,
  onSuccess 
}: ReportFormProps) {
  const { data: session } = useSession();
  const { toast } = useToast();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [uploadingImages, setUploadingImages] = useState(false);
  const [attachments, setAttachments] = useState<string[]>([]);

  const form = useForm<ReportFormValues>({
    resolver: zodResolver(reportFormSchema),
    defaultValues: {
      type: ReportType.INAPPROPRIATE_CONTENT,
      reason: '',
      details: '',
      attachments: [],
    },
  });

  const handleAttachmentUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!e.target.files || e.target.files.length === 0) return;
    
    if (attachments.length + e.target.files.length > 5) {
      toast({
        title: "Maximum attachments reached",
        description: "You can only upload up to 5 attachments",
        variant: "destructive"
      });
      return;
    }

    setUploadingImages(true);
    
    try {
      const files = Array.from(e.target.files);
      const uploadPromises = files.map(async (file) => {
        // Get signature for secure upload
        const res = await generateUploadSignature({
          folder: 'misc',
          // Public ID will be generated by Cloudinary
        });
        
        if (!res.signature || !res.timestamp) {
          throw new Error('Failed to generate upload signature');
        }
        
        // Create form data for Cloudinary upload
        const formData = new FormData();
        formData.append('file', file);
        formData.append('api_key', res.apiKey || '');
        formData.append('timestamp', res.timestamp.toString());
        formData.append('signature', res.signature);
        formData.append('folder', res.folder);
        
        // Upload to Cloudinary
        const uploadRes = await fetch(
          `https://api.cloudinary.com/v1_1/${process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME}/image/upload`,
          {
            method: 'POST',
            body: formData,
          }
        );
        
        const data = await uploadRes.json();
        if (data.error) {
          throw new Error(data.error.message);
        }
        
        return data.secure_url;
      });
      
      const uploadedUrls = await Promise.all(uploadPromises);
      setAttachments([...attachments, ...uploadedUrls]);
      form.setValue('attachments', [...attachments, ...uploadedUrls]);
      
    } catch (error) {
      console.error('Error uploading images:', error);
      toast({
        title: "Upload failed",
        description: "Failed to upload one or more images",
        variant: "destructive"
      });
    } finally {
      setUploadingImages(false);
      // Reset the input
      e.target.value = '';
    }
  };

  const removeAttachment = (index: number) => {
    const newAttachments = [...attachments];
    newAttachments.splice(index, 1);
    setAttachments(newAttachments);
    form.setValue('attachments', newAttachments);
  };

  const onSubmit = async (values: ReportFormValues) => {
    if (!session?.user) {
      toast({
        title: "Authentication required",
        description: "Please sign in to report content",
        variant: "destructive"
      });
      return;
    }

    setIsSubmitting(true);

    try {
      const response = await fetch('/api/reports', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          ...values,
          targetType,
          targetId,
          attachments
        }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || 'Failed to submit report');
      }

      toast({
        title: "Report submitted",
        description: "Thank you for your report. We'll review it shortly.",
      });

      form.reset();
      setAttachments([]);
      onOpenChange(false);
      onSuccess?.();
    } catch (error) {
      console.error('Error submitting report:', error);
      toast({
        title: "Submission failed",
        description: error instanceof Error ? error.message : "Failed to submit report",
        variant: "destructive"
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[500px]">
        <DialogHeader>
          <DialogTitle>Report {targetType.toLowerCase()}</DialogTitle>
          <DialogDescription>
            {targetType === ReportTargetType.PROPERTY && `Reporting property: ${targetName}`}
            {targetType === ReportTargetType.USER && `Reporting user: ${targetName}`}
            {targetType === ReportTargetType.REVIEW && `Reporting review`}
            {targetType === ReportTargetType.BOOKING && `Reporting booking: ${targetName}`}
          </DialogDescription>
        </DialogHeader>

        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            <FormField
              control={form.control}
              name="type"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Report Type</FormLabel>
                  <Select
                    disabled={isSubmitting}
                    onValueChange={field.onChange}
                    defaultValue={field.value}
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Select a report type" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {Object.values(ReportType).map((type) => (
                        <SelectItem key={type} value={type}>
                          {type.replace(/_/g, ' ').toLowerCase()
                            .split(' ')
                            .map(word => word.charAt(0).toUpperCase() + word.slice(1))
                            .join(' ')}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="reason"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Reason</FormLabel>
                  <FormControl>
                    <Textarea
                      placeholder="Briefly describe why you're reporting this content"
                      disabled={isSubmitting}
                      className="resize-none"
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="details"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Additional Details (Optional)</FormLabel>
                  <FormControl>
                    <Textarea
                      placeholder="Provide any additional information that might help our team"
                      disabled={isSubmitting}
                      className="resize-none"
                      {...field}
                      value={field.value || ''}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <div className="space-y-2">
              <FormLabel>Attachments (Optional)</FormLabel>
              <div className="flex items-center gap-2">
                <Button
                  type="button"
                  variant="outline"
                  size="sm"
                  onClick={() => document.getElementById('file-upload')?.click()}
                  disabled={isSubmitting || uploadingImages || attachments.length >= 5}
                  className={cn(
                    "w-full",
                    (uploadingImages || attachments.length >= 5) && "opacity-50 cursor-not-allowed"
                  )}
                >
                  {uploadingImages ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Uploading...
                    </>
                  ) : (
                    <>
                      <Upload className="mr-2 h-4 w-4" />
                      Upload Images
                    </>
                  )}
                </Button>
                <Input
                  id="file-upload"
                  type="file"
                  accept="image/*"
                  multiple
                  className="hidden"
                  onChange={handleAttachmentUpload}
                  disabled={isSubmitting || uploadingImages || attachments.length >= 5}
                />
              </div>
              
              {/* Attachment previews */}
              {attachments.length > 0 && (
                <div className="grid grid-cols-2 gap-2 mt-2">
                  {attachments.map((url, index) => (
                    <div key={index} className="relative group">
                      <Image 
                        src={url} 
                        alt={`Attachment ${index + 1}`} 
                        className="h-24 w-full object-cover rounded-md"
                      />
                      <button
                        type="button"
                        onClick={() => removeAttachment(index)}
                        className="absolute top-1 right-1 bg-black bg-opacity-50 text-white p-1 rounded-full opacity-0 group-hover:opacity-100 transition-opacity"
                        aria-label="Remove attachment"
                      >
                        <X className="h-4 w-4" />
                      </button>
                    </div>
                  ))}
                </div>
              )}
              <p className="text-xs text-muted-foreground">
                You can upload up to 5 images as evidence (optional)
              </p>
            </div>

            <DialogFooter>
              <Button
                type="button"
                variant="outline"
                onClick={() => onOpenChange(false)}
                disabled={isSubmitting}
              >
                Cancel
              </Button>
              <Button type="submit" disabled={isSubmitting}>
                {isSubmitting ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Submitting...
                  </>
                ) : 'Submit Report'}
              </Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}
