import mongoose, { Schema, Document } from "mongoose";

export interface IInfluencer extends Document {
  userId?: mongoose.Types.ObjectId; // Optional link to User account
  name: string;
  email: string;
  phone?: string;
  platform: 'youtube' | 'instagram' | 'facebook' | 'twitter' | 'tiktok' | 'blog' | 'other';
  handle: string; // @username or channel name
  followerCount?: number;
  niche: string; // travel, lifestyle, etc.
  referralCode: string; // Unique referral code
  commissionType: 'percentage' | 'fixed';
  commissionRate: number; // Percentage (1-100) or fixed amount in INR
  totalEarnings: number;
  walletBalance: number;
  totalClicks: number;
  totalBookings: number;
  totalRevenue: number; // Total revenue generated by this influencer
  status: 'pending' | 'active' | 'suspended' | 'inactive';
  joinedAt: Date;
  lastActiveAt?: Date;
  bankDetails?: {
    accountNumber: string;
    ifscCode: string;
    accountName: string;
    bankName: string;
  };
  panNumber?: string;
  gstNumber?: string;
  address?: {
    street: string;
    city: string;
    state: string;
    pincode: string;
    country: string;
  };
  notes?: string; // Admin notes
  tags?: string[]; // For categorization
  createdBy: mongoose.Types.ObjectId; // Admin who created this
  createdAt: Date;
  updatedAt: Date;
}

const InfluencerSchema = new Schema<IInfluencer>(
  {
    userId: {
      type: Schema.Types.ObjectId,
      ref: "User",
      sparse: true
    },
    name: {
      type: String,
      required: true,
      trim: true,
      maxlength: 100
    },
    email: {
      type: String,
      required: true,
      trim: true,
      lowercase: true
    },
    phone: {
      type: String,
      trim: true
    },
    platform: {
      type: String,
      enum: ['youtube', 'instagram', 'facebook', 'twitter', 'tiktok', 'blog', 'other'],
      required: true
    },
    handle: {
      type: String,
      required: true,
      trim: true,
      maxlength: 100
    },
    followerCount: {
      type: Number,
      min: 0
    },
    niche: {
      type: String,
      required: true,
      trim: true
    },
    referralCode: {
      type: String,
      required: true,
      unique: true,
      uppercase: true,
      trim: true,
      minlength: 4,
      maxlength: 20
    },
    commissionType: {
      type: String,
      enum: ['percentage', 'fixed'],
      required: true,
      default: 'percentage'
    },
    commissionRate: {
      type: Number,
      required: true,
      min: 0,
      validate: {
        validator: function(this: IInfluencer, v: number) {
          if (this.commissionType === 'percentage') {
            return v > 0 && v <= 50; // Max 50% commission
          }
          return v > 0; // Fixed amount must be positive
        },
        message: "Commission rate must be between 1-50% for percentage type or positive for fixed amount"
      }
    },
    totalEarnings: {
      type: Number,
      default: 0,
      min: 0
    },
    walletBalance: {
      type: Number,
      default: 0,
      min: 0
    },
    totalClicks: {
      type: Number,
      default: 0,
      min: 0
    },
    totalBookings: {
      type: Number,
      default: 0,
      min: 0
    },
    totalRevenue: {
      type: Number,
      default: 0,
      min: 0
    },
    status: {
      type: String,
      enum: ['pending', 'active', 'suspended', 'inactive'],
      default: 'pending'
    },
    joinedAt: {
      type: Date,
      default: Date.now
    },
    lastActiveAt: {
      type: Date
    },
    bankDetails: {
      accountNumber: { type: String, trim: true },
      ifscCode: { type: String, trim: true, uppercase: true },
      accountName: { type: String, trim: true },
      bankName: { type: String, trim: true }
    },
    panNumber: {
      type: String,
      trim: true,
      uppercase: true
    },
    gstNumber: {
      type: String,
      trim: true,
      uppercase: true
    },
    address: {
      street: { type: String, trim: true },
      city: { type: String, trim: true },
      state: { type: String, trim: true },
      pincode: { type: String, trim: true },
      country: { type: String, trim: true, default: 'India' }
    },
    notes: {
      type: String,
      maxlength: 1000
    },
    tags: [{ type: String, trim: true }],
    createdBy: {
      type: Schema.Types.ObjectId,
      ref: "User",
      required: true
    }
  },
  {
    timestamps: true,
    collection: "influencers",
    toJSON: { virtuals: true },
    toObject: { virtuals: true }
  }
);

// Indexes for performance
InfluencerSchema.index({ referralCode: 1 }, { unique: true });
InfluencerSchema.index({ email: 1 });
InfluencerSchema.index({ status: 1 });
InfluencerSchema.index({ platform: 1 });
InfluencerSchema.index({ createdAt: -1 });
InfluencerSchema.index({ totalEarnings: -1 });
InfluencerSchema.index({ totalBookings: -1 });

// Virtual for conversion rate
InfluencerSchema.virtual('conversionRate').get(function() {
  if (this.totalClicks === 0) return 0;
  return ((this.totalBookings / this.totalClicks) * 100).toFixed(2);
});

// Virtual for average commission per booking
InfluencerSchema.virtual('avgCommissionPerBooking').get(function() {
  if (this.totalBookings === 0) return 0;
  return (this.totalEarnings / this.totalBookings).toFixed(2);
});

// Virtual for referral link
InfluencerSchema.virtual('referralLink').get(function() {
  return `${process.env.NEXT_PUBLIC_APP_URL || 'https://baithakaghar.com'}?ref=${this.referralCode}`;
});

// Pre-save middleware to generate referral code if not provided
InfluencerSchema.pre('save', function(next) {
  if (!this.referralCode) {
    // Generate unique referral code from name and random chars
    const nameCode = this.name.replace(/[^a-zA-Z]/g, '').substring(0, 4).toUpperCase();
    const randomCode = Math.random().toString(36).substring(2, 6).toUpperCase();
    this.referralCode = `${nameCode}${randomCode}`;
  }
  next();
});

// Method to calculate commission for a booking amount
InfluencerSchema.methods.calculateCommission = function(bookingAmount: number): number {
  if (this.status !== 'active') return 0;
  
  if (this.commissionType === 'percentage') {
    return (bookingAmount * this.commissionRate) / 100;
  } else {
    return this.commissionRate; // Fixed amount
  }
};

// Method to update activity timestamp
InfluencerSchema.methods.updateActivity = function() {
  this.lastActiveAt = new Date();
  return this.save();
};

const Influencer = mongoose.models.Influencer || mongoose.model<IInfluencer>("Influencer", InfluencerSchema);

export default Influencer; 